#!/usr/bin/env python
import os
import shutil
from SCons.Script import *

def normalize_path(val, env):
	return val if os.path.isabs(val) else os.path.join(env.Dir("#").abspath, val)

def validate_parent_dir(key, val, env):
	if not os.path.isdir(normalize_path(os.path.dirname(val), env)):
		raise UserError("'%s' is not a directory: %s" % (key, os.path.dirname(val)))

def get_filename(libname, env):
	filename = "{}{}{}".format(libname, env["suffix"], env["SHLIBSUFFIX"])

	if env["platform"] == "macos" or env["platform"] == "ios":
		platlibname = "{}.{}.{}".format(libname, env["platform"], env["target"])
		filename = "{}.framework/{}".format(env["platform"], platlibname, platlibname)
	return filename

def find_directories(directory):
	directories = [ directory ]
	for root, dirs, _ in os.walk(directory):
		directories.extend([directory + os.path.relpath(os.path.join(root, dir), directory).replace("\\", "/") + "/" for dir in dirs])
	return directories


source_libname = "august21st-game"
source_projectdir = "project"

localEnv = Environment(tools=["default"], PLATFORM="")

customs = ["custom.py"]
customs = [os.path.abspath(path) for path in customs]

opts = Variables(customs, ARGUMENTS)
opts.Add(
	BoolVariable(
		key="compiledb",
		help="Generate compilation DB (`compile_commands.json`) for external tools",
		default=localEnv.get("compiledb", False),
	)
)
opts.Add(
	PathVariable(
		key="compiledb_file",
		help="Path to a custom `compile_commands.json` file",
		default=localEnv.get("compiledb_file", "compile_commands.json"),
		validator=validate_parent_dir,
	)
)
opts.Update(localEnv)

Help(opts.GenerateHelpText(localEnv))

env:Environment = localEnv.Clone()
env["compiledb"] = False

env.Tool("compilation_db")
compilation_db = env.CompilationDatabase(
	normalize_path(localEnv["compiledb_file"], localEnv)
)
env.Alias("compiledb", compilation_db)

env = SConscript("godot-cpp/SConstruct", {"env": env, "customs": customs})
source_dirs = find_directories("src/")
env.Append(CPPPATH=source_dirs)

# Dataproto
dataproto_include_dirs = find_directories("dataproto-cpp/include")
env.Append(CPPPATH=dataproto_include_dirs)
source_dirs += dataproto_include_dirs
dataproto_source_dirs = find_directories("dataproto-cpp/src/")
env.Append(CPPPATH=dataproto_source_dirs)
source_dirs += dataproto_source_dirs

# CommandIO
command_io_source_dirs = find_directories("commandIO-cpp/src/")
env.Append(CPPPATH=command_io_source_dirs)
source_dirs += command_io_source_dirs

# Source
sources = []
for source_dir in source_dirs:
	sources.append(Glob(source_dir + "*.cpp"))

source_file = get_filename(source_libname, env)
# Build output from env.SharedLibrary to 'august21st-game/bin/{platform}/...'
source_libfile = "bin/{}/{}".format(env["platform"], source_file)

source_library = env.SharedLibrary(
	source_libfile,
	source=sources
)
source_installpath = "{}/bin/{}/lib{}".format(source_projectdir, env["platform"], source_file)
source_copy = env.InstallAs(source_installpath, source_library)

default_args = [source_library, source_copy]
if localEnv.get("compiledb", False):
	default_args += [compilation_db]
Default(*default_args)
